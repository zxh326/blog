<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Zzde's blog</title><link>https://zzde.me/</link><description>Recent content on Zzde's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 31 Dec 2019 23:59:59 +0800</lastBuildDate><atom:link href="https://zzde.me/index.xml" rel="self" type="application/rss+xml"/><item><title>Things I Don’t Know as of 2018</title><link>https://zzde.me/posts/things-i-dont-know-as-of-2018/</link><pubDate>Tue, 31 Dec 2019 23:59:59 +0800</pubDate><guid>https://zzde.me/posts/things-i-dont-know-as-of-2018/</guid><description>I dont't know anything.</description></item><item><title>[转]反向代理层绝不能替代DNS轮询</title><link>https://zzde.me/posts/reverse-proxy-layer-must-not-replace-dns-polling/</link><pubDate>Mon, 02 Dec 2019 12:34:17 +0800</pubDate><guid>https://zzde.me/posts/reverse-proxy-layer-must-not-replace-dns-polling/</guid><description>&lt;p>原创： 58沈剑
今天
有朋友问我，DNS轮询是不是过时的技术了？有了反向代理层（Nginx、LVS、F5等），是不是就不需要DNS轮询了？
然而，反向代理层绝不能替代DNS轮询！&lt;/p>
&lt;h3 id="反向代理层有什么用架构实现时要注意什么">反向代理层有什么用？架构实现时要注意什么？&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>作为服务端统一入口&lt;/strong>，屏蔽后端WEB集群细节，代表整个WEB集群；
&lt;em>画外音：这就是为啥它叫反向代理&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>保证WEB集群的扩展性&lt;/strong>，Nginx后端可随时加WEB实例；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实施负载均衡&lt;/strong>，反向代理层会将请求均匀分发给后端WEB集群的每一个实例；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>保证WEB集群的高可用&lt;/strong>，任何一个WEB实例挂了，服务都不受影响；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>注意自身高可用&lt;/strong>，防止一台Nginx挂了，服务端统一入口受影响；&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>如何优雅的关闭go Channel</title><link>https://zzde.me/posts/how-to-close-channels-in-golang-elegantly/</link><pubDate>Wed, 13 Mar 2019 20:33:59 +0800</pubDate><guid>https://zzde.me/posts/how-to-close-channels-in-golang-elegantly/</guid><description>本文译自：How To Close Channels in Golang Elegantly。 几天前，我写了一篇文章来说明golang中channel的使用规范。在reddit和HN，那篇</description></item><item><title>Go中的channel详解</title><link>https://zzde.me/posts/go-channel-detail/</link><pubDate>Sun, 13 Jan 2019 15:04:33 +0800</pubDate><guid>https://zzde.me/posts/go-channel-detail/</guid><description>Channel是Go中的一个核心类型，你可以把它看成一个管道，通过它并发核心单元就可以发送或者接收数据进行通讯(communication)</description></item><item><title>幂等设计</title><link>https://zzde.me/posts/idempotent-design/</link><pubDate>Sun, 07 Oct 2018 01:18:31 +0800</pubDate><guid>https://zzde.me/posts/idempotent-design/</guid><description>我们实际系统中有很多操作，是不管做多少次，都应该产生一样的效果或返回一样的结果。 例如前端重复提交选中的数据，应该后台只产生对应这个数据的一个</description></item><item><title>关于 SSH 端口转发</title><link>https://zzde.me/posts/ssh-port-forwarding/</link><pubDate>Wed, 12 Sep 2018 23:23:59 +0800</pubDate><guid>https://zzde.me/posts/ssh-port-forwarding/</guid><description>&lt;p>SSH有三种端口转发模式&lt;/p>
&lt;ul>
&lt;li>本地端口转发(Local Port Forwarding)&lt;/li>
&lt;li>远程端口转发(Remote Port Forwarding)&lt;/li>
&lt;li>动态端口转发(Dynamic Port Forwarding)&lt;/li>
&lt;/ul>
&lt;p>对于本地/远程端口转发，两者的方向恰好相反。动态端口转发则可以用于科学上网。&lt;/p>
&lt;p>SSH端口转发也被称作SSH隧道(SSH Tunnel)，因为它们都是通过SSH登陆之后，在SSH客户端与SSH服务端之间建立了一个隧道，从而进行通信。SSH隧道是非常安全的，因为SSH是通过加密传输数据的(SSH全称为Secure Shell)。&lt;/p>
&lt;p>常见的用途就是在管理远程数据库时，开启远程登陆是非常不安全的。所以通过隧道将其端口转发到本地（例如：mysql 的3306，redis的 6379）&lt;/p></description></item><item><title>使用travis-ci自动部署hexo博客</title><link>https://zzde.me/posts/auto-deploy-hexo-blog-with-traivs-ci/</link><pubDate>Thu, 02 Aug 2018 12:03:23 +0800</pubDate><guid>https://zzde.me/posts/auto-deploy-hexo-blog-with-traivs-ci/</guid><description>最近研究了Traivs-ci，发现持续集成真是一个不错的东西，写好脚本之后，帮我省了一堆事。 现在用它来帮我持续集成我的hexo博客，现在我只</description></item><item><title>ArchLinux安装与配置</title><link>https://zzde.me/posts/how-to-install-arch-and-config/</link><pubDate>Sat, 20 May 2017 21:03:59 +0800</pubDate><guid>https://zzde.me/posts/how-to-install-arch-and-config/</guid><description>A simple, lightweight distribution 一个简单，轻便的Linux操作系统， Archlinux有一个强大的wiki，本文依据官方wiki编写 如有不当之处，请指出！ 准备和磁盘</description></item><item><title>Hello World</title><link>https://zzde.me/posts/hello-world/</link><pubDate>Tue, 21 Mar 2017 00:00:00 +0800</pubDate><guid>https://zzde.me/posts/hello-world/</guid><description>Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.
Hello Hexo</description></item></channel></rss>